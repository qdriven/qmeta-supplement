package io.qmeta.supplement;

import cn.hutool.core.exceptions.ExceptionUtil;
import cn.hutool.core.io.FastStringWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.UndeclaredThrowableException;

/**
 * Exception utilities.
 *
 * <p>Part from apache commons lang3 project.
 *
 * @see "org.apache.commons.lang3.exception.ExceptionUtils"
 */
public class ExceptionUtils extends ExceptionUtil {

  /**
   * Gets the stack trace from a Throwable as a String.
   *
   * <p>The result of this method vary by JDK version as this method uses {@link
   * Throwable#printStackTrace(PrintWriter)}. On JDK1.3 and earlier, the cause exception will not be
   * shown unless the specified throwable alters printStackTrace.
   *
   * @param throwable the <code>Throwable</code> to be examined
   * @return the stack trace as generated by the exception's <code>printStackTrace(PrintWriter)
   *     </code> method
   */
  public static String getStackTrace(final Throwable throwable) {
    final StringWriter sw = new StringWriter();
    final PrintWriter pw = new PrintWriter(sw, true);
    throwable.printStackTrace(pw);
    return sw.getBuffer().toString();
  }

  /**
   * 将CheckedException转换为UncheckedException.
   *
   * @param e Throwable
   * @return {RuntimeException}
   */
  public static RuntimeException unchecked(Throwable e) {
    if (e instanceof Error) {
      throw (Error) e;
    } else if (e instanceof IllegalAccessException
        || e instanceof IllegalArgumentException
        || e instanceof NoSuchMethodException) {
      return new IllegalArgumentException(e);
    } else if (e instanceof InvocationTargetException) {
      return new RuntimeException(((InvocationTargetException) e).getTargetException());
    } else if (e instanceof RuntimeException) {
      return (RuntimeException) e;
    } else if (e instanceof InterruptedException) {
      Thread.currentThread().interrupt();
    }
    return runtime(e);
  }

  /**
   * 不采用 RuntimeException 包装，直接抛出，使异常更加精准
   *
   * @param throwable Throwable
   * @param <T> 泛型标记
   * @return Throwable
   * @throws T 泛型
   */
  @SuppressWarnings("unchecked")
  private static <T extends Throwable> T runtime(Throwable throwable) throws T {
    throw (T) throwable;
  }

  /**
   * 代理异常解包
   *
   * @param wrapped 包装过得异常
   * @return 解包后的异常
   */
  public static Throwable unwrap(Throwable wrapped) {
    Throwable unwrapped = wrapped;
    while (true) {
      if (unwrapped instanceof InvocationTargetException) {
        unwrapped = ((InvocationTargetException) unwrapped).getTargetException();
      } else if (unwrapped instanceof UndeclaredThrowableException) {
        unwrapped = ((UndeclaredThrowableException) unwrapped).getUndeclaredThrowable();
      } else {
        return unwrapped;
      }
    }
  }

  /**
   * 将ErrorStack转化为String.
   *
   * @param ex Throwable
   * @return {String}
   */
  public static String getStackTraceAsString(Throwable ex) {
    FastStringWriter stringWriter = new FastStringWriter();
    ex.printStackTrace(new PrintWriter(stringWriter));
    return stringWriter.toString();
  }

  public static RuntimeException exception(String message) {
    throw new RuntimeException(message);
  }
}
